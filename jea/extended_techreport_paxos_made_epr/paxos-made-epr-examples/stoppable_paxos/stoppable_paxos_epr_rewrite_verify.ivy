#lang ivy1.6

################################################################################
#
# Modules that should probably come from a standard library
#
################################################################################

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node
type value
type quorum
type round
type inst
type votemap

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)

relation inst_le(X:inst, Y:inst)
instantiate total_order(inst_le)

# proposers can propose the stop value to stop the algorithm
individual stop: value

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation one_b_msg(N:node, R1:round, M:votemap)
relation proposal(I:inst, R:round, V:value) # 2a
relation active(R:round) # round R has received a quorum of 1b and can now propose new values
relation vote(N:node, I:inst, R:round, V:value) # 2b
individual maxr(M:votemap,I:inst) : round
individual maxv(M:votemap,I:inst) : value

relation error
init ~error

individual r:round
individual q:quorum
individual m:votemap


action verify_receive_join_acks_rewrite = {
    # assume auxiliary invariant
    # only propose in active rounds
    assume proposal(I,R,V) -> active(R);
    # proposals are unique per round
    assume proposal(I,R,V1) & proposal(I,R,V2) -> V1 = V2;
    # only vote for proposed values
    assume vote(N,I,R,V) -> proposal(I,R,V);
    # properties of one_b_msg
    assume one_b_msg(N,R2,M) & maxr(M,I) = none & ~le(R2,R1) -> ~vote(N,I,R1,V2);
    assume one_b_msg(N,R, M) & maxr(M,I) ~= none -> ~le(R,maxr(M,I)) & vote(N,I,maxr(M,I),maxv(M,I));
    assume one_b_msg(N,R, M) & maxr(M,I) ~= none & ~le(R,ROTHER) & ~le(ROTHER,maxr(M,I)) -> ~vote(N,I,ROTHER,VOTHER);
    # properties of none
    assume ~vote(N,I,none,V);

    # assume action condition (forall exists, but stratified)
    assume r ~= none;
    assume ~active(r); # this happens only once
    assume forall N:node. member(N, q) -> exists M:votemap. one_b_msg(N,r,M);

    # check equivalence
    if ~(
        (forall I:inst. (
            ( maxr(m,I) = none &
              forall N,M. ~(member(N, q) & one_b_msg(N,r,M) & maxr(M,I) ~= none) ) |
            ( (exists N,M.   member(N, q) & one_b_msg(N,r,M) & maxr(M,I) ~= none & maxr(M,I) = maxr(m,I) & maxv(M,I) = maxv(m,I)) &
              (forall N,M.   member(N, q) & one_b_msg(N,r,M) & maxr(M,I) ~= none -> le(maxr(M,I),maxr(m,I))) )
        )) <->
        (forall I:inst. (
            ( maxr(m,I) = none &
              forall N,R,V. ~(member(N, q) & ~le(r,R) & vote(N,I,R,V)) ) |
            ( (exists N,R,V.  member(N, q) & ~le(r,R) & vote(N,I,R,V) & R = maxr(m,I) & V = maxv(m,I)) &
              (forall N,R,V.  member(N, q) & ~le(r,R) & vote(N,I,R,V) -> le(R,maxr(m,I))) )
        ))
    ) {
        error := true
    }
}

export verify_receive_join_acks_rewrite

conjecture ~error
