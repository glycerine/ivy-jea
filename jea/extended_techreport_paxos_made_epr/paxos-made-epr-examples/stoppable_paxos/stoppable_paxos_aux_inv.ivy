#lang ivy1.6

################################################################################
#
# Modules that should probably come from a standard library
#
################################################################################

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node
type value
type quorum
type round
type inst
type votemap

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)

relation inst_le(X:inst, Y:inst)
instantiate total_order(inst_le)

# proposers can propose the stop value to stop the algorithm
individual stop: value

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation one_a(R:round)
relation one_b_msg(N:node, R1:round, M:votemap)
relation proposal(I:inst, R:round, V:value) # 2a
relation active(R:round) # round R has received a quorum of 1b and can now propose new values
relation vote(N:node, I:inst, R:round, V:value) # 2b
relation decision(N:node, I:inst, R:round, V:value) # got 2b from a quorum
individual maxr(M:votemap,I:inst) : round
individual maxv(M:votemap,I:inst) : value

init ~one_a(R)
init ~one_b_msg(N,R1,M)
init ~proposal(I,R,V)
init ~active(R)
init ~vote(N,I,R,V)
init ~decision(N,I,R,V)


action send_1a(r:round) = {
    # a proposer selects a round and sends a message asking nodes to join the round
    assume r ~= none;
    one_a(r) := true
}


action join_round(n:node, r:round, m:votemap) = {
    # receive 1a and answer with 1b
    assume r ~= none;
    assume one_a(r);
    assume one_b_msg(n,R,M) -> le(R,r);

    # find the maximal vote in a round less than r, for all instances
    assume forall I:inst. (
        ( maxr(m,I) = none & forall R,V. ~(vote(n,I,R,V) & ~le(r,R)) ) |
        ( vote(n,I,maxr(m,I),maxv(m,I)) & ~le(r,maxr(m,I)) &
          forall R,V. vote(n,I,R,V) & ~le(r,R) -> le(R,maxr(m,I)) )
    );
    # send the 1b message
    one_b_msg(n,r,m) := true
}

action receive_join_acks(r:round, q:quorum, m:votemap, im:inst) = {
    # receive a quorum of 1b's, activate round and propose for instances that have choosable values at lower rounds
    assume r ~= none;
    assume ~active(r); # this happens only once
    assume forall N:node. member(N, q) -> exists M:votemap. one_b_msg(N,r,M);

    # find the maximal vote in the quorum for each instance, according to oneb_msg
    assume forall I:inst. (
        ( maxr(m,I) = none &
          forall N,M. ~(member(N, q) & one_b_msg(N,r,M) & maxr(M,I) ~= none) ) |
        ( (exists N,M.   member(N, q) & one_b_msg(N,r,M) & maxr(M,I) ~= none & maxr(M,I) = maxr(m,I) & maxv(M,I) = maxv(m,I)) &
          (forall N,M.   member(N, q) & one_b_msg(N,r,M) & maxr(M,I) ~= none -> le(maxr(M,I),maxr(m,I))) )
    );
    # activate round
    active(r) := true;
    # propose according to the overapproximating rule
    # check if there are stops
    if (forall I . ~(maxr(m,I) ~= none & maxv(m,I) = stop)) {
        # if there are no stops, propose according to m
        proposal(I, r, V) := proposal(I, r, V) | (maxr(m,I) ~= none & V = maxv(m,I))
    } else {
        # if there are stops, find the stop with the maximal round
        assume (
            maxr(m,im) ~= none & maxv(m,im) = stop &
            forall I . (maxr(m,I) ~= none & maxv(m,I) = stop) -> le(maxr(m,I),maxr(m,im))
        );
        # check if the stop at im is voided
        if (exists I . ~inst_le(I,im) & maxr(m,I) ~= none & ~le(maxr(m,I), maxr(m,im))) {
            # the stop at im is voided. void all stops, and also all
            # proposals at instances greater than im and lower
            # rounds. this is needed to be an overapproximation of
            # Lamport's version.
            proposal(I, r, V) := proposal(I, r, V) | (maxr(m,I) ~= none & V = maxv(m,I) &
                ~(maxv(m,I) = stop | (~inst_le(I,im) & ~le(maxr(m,im),maxr(m,I))))
            )
        } else {
            # the stop at im is not voided. void all other stops and
            # all proposals at instances larger than im
            proposal(I, r, V) := proposal(I, r, V) | (maxr(m,I) ~= none & V = maxv(m,I) &
                ~((I ~= im & maxv(m,I) = stop) | ~inst_le(I,im))
            )
        }
    }
}


action propose(r:round, i:inst, v:value) = {
    # propose a new arbitrary value an available instance in an active round
    assume r ~= none;
    assume active(r);
    assume ~proposal(i, r, V);
    assume ~(~inst_le(i,I) & proposal(I, r, stop));
    assume ~(~inst_le(I,i) & proposal(I,r,V) & v = stop);
    proposal(i, r, v) := true
}


action cast_vote(n:node, v:value, r:round, i:inst) = {
    # receive a 2a and send 2b
    assume r ~= none;
    assume one_b_msg(n,R,M) -> le(R,r);
    assume proposal(i, r, v);
    vote(n, i, r, v) := true
}


action decide(n:node, r:round, v:value, q:quorum, i:inst) = {
    # get 2b from a quorum
    assume r ~= none;
    assume member(N, q) -> vote(N, i, r, v);
    decision(n, i, r, v) := true
}


export send_1a
export join_round
export receive_join_acks
export propose
export cast_vote
export decide


# auxiliary invariant:

# only propose in active rounds
conjecture proposal(I,R,V) -> active(R)

# proposals are unique per round
conjecture proposal(I,R,V1) & proposal(I,R,V2) -> V1 = V2

# only vote for proposed values
conjecture vote(N,I,R,V) -> proposal(I,R,V)

# properties of one_b_msg
conjecture one_b_msg(N,R2,M) & maxr(M,I) = none & ~le(R2,R1) -> ~vote(N,I,R1,V2)
conjecture one_b_msg(N,R, M) & maxr(M,I) ~= none -> ~le(R,maxr(M,I)) & vote(N,I,maxr(M,I),maxv(M,I))
conjecture one_b_msg(N,R, M) & maxr(M,I) ~= none & ~le(R,ROTHER) & ~le(ROTHER,maxr(M,I)) -> ~vote(N,I,ROTHER,VOTHER)

# properties of none
conjecture ~vote(N,I,none,V)
