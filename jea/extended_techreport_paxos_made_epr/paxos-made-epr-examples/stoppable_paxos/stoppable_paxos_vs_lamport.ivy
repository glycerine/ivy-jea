#lang ivy1.6

################################################################################
#
# Modules that should probably come from a standard library
#
################################################################################

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node
type value
type quorum
type round
type inst
type votemap

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)

relation inst_le(X:inst, Y:inst)
instantiate total_order(inst_le)

# proposers can propose the stop value to stop the algorithm
individual stop: value

relation member(N:node, Q:quorum)
# axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation one_a(R:round)
relation one_b_msg(N:node, R1:round, M:votemap)
relation left_round(N:node, R:round)
relation joined_round(N:node, R:round)
relation proposal(I:inst, R:round, V:value) # 2a
relation proposal_lamport(I:inst, R:round, V:value)
relation proposal_overapprox(I:inst, R:round, V:value)
relation proposal_variant(I:inst, R:round, V:value)
relation active(R:round) # round R has received a quorum of 1b and can now propose new values
relation vote(N:node, I:inst, R:round, V:value) # 2b
relation decision(N:node, I:inst, R:round, V:value) # got 2b from a quorum
individual maxr(M:votemap,I:inst) : round
individual maxv(M:votemap,I:inst) : value

action receive_join_acks(r:round, q:quorum, m:votemap) = {
    # assume known inductive invariant
    assume decision(N1,I,R1,V1) & decision(N2,I,R2,V2) -> V1 = V2;
    assume decision(N1,I1,R1,stop) & ~inst_le(I2,I1) -> ~decision(N2,I2,R2,V);
    assume proposal(I,R,V) -> active(R);
    assume proposal(I,R,V1) & proposal(I,R,V2) -> V1 = V2;
    assume vote(N,I,R,V) -> proposal(I,R,V);
    #assume forall R:round, V:value. (exists N:node. decision(N,I,R,V)) -> exists Q:quorum. forall N:node. member(N, Q) -> vote(N,I,R,V);
    assume one_b_msg(N,R2,M) & maxr(M,I) = none & ~le(R2,R1) -> ~vote(N,I,R1,V2);
    assume one_b_msg(N,R, M) & maxr(M,I) ~= none -> ~le(R,maxr(M,I)) & vote(N,I,maxr(M,I),maxv(M,I));
    assume one_b_msg(N,R, M) & maxr(M,I) ~= none & ~le(R,ROTHER) & ~le(ROTHER,maxr(M,I)) -> ~vote(N,I,ROTHER,VOTHER);
    assume ~proposal(I,none,V);
    assume ~vote(N,I,none,V);
    assume ~decision(N,I,none,V);
    assume ~one_b_msg(N,none,M);
    assume ~active(none);
    # assume forall I:inst, R1:round, R2:round, V1:value, V2:value, Q:quorum. (
    #     ~le(R2,R1) & proposal(I,R2,V2) & V1 ~= V2 -> (
    #         exists N:node. member(N,Q) & left_round(N,R1) & ~vote(N,I,R1,V1)
    #     )
    # );
    # assume forall I:inst, R1:round, R2:round, V:value, Q:quorum. (
    #     ~le(R2,R1) & active(R2) & ~proposal(I,R2,V) -> (
    #         exists N:node. member(N,Q) & left_round(N,R1) & ~vote(N,I,R1,V)
    #     )
    # );
    assume joined_round(N,R2) & ~le(R2,R1) -> left_round(N,R1);
    assume one_b_msg(N,R,M) -> joined_round(N,R);
    assume proposal(I1,R,stop) & ~inst_le(I2,I1) -> ~proposal(I2,R,V);
    # assume forall I1:inst, I2:inst, R1:round, R2:round, V:value, Q:quorum. (
    #     ~le(R2,R1) & ~inst_le(I2,I1) & proposal(I2,R2,V) -> (
    #         exists N:node. member(N,Q) & left_round(N,R1) & ~vote(N,I1,R1,stop)
    #     )
    # );
    # assume forall I1:inst, I2:inst, R1:round, R2:round, V:value, Q:quorum. (
    #     ~le(R2,R1) & ~inst_le(I2,I1) & proposal(I1,R2,stop) -> (
    #         exists N:node. member(N,Q) & left_round(N,R1) & ~vote(N,I2,R1,V)
    #     )
    # );

    # receive a quorum of 1b's, marks active instances and proposes unactive instances
    assume r ~= none;
    assume ~active(r); # this happens only once
    assume forall N:node. member(N, q) -> joined_round(N,r);

    # find the maximal vote in the quorum for each instance, according to votes themselves
    assume forall I:inst. (
        ( maxr(m,I) = none &
          forall N,R,V. ~(member(N, q) & ~le(r,R) & vote(N,I,R,V)) ) |
        ( (exists N,R,V.  member(N, q) & ~le(r,R) & vote(N,I,R,V) & R = maxr(m,I) & V = maxv(m,I)) &
          (forall N,R,V.  member(N, q) & ~le(r,R) & vote(N,I,R,V) -> le(R,maxr(m,I))) )
    );
    # activate round
    active(r) := true;


    # compute proposal according to Lamport's rule
    local sval2a:votemap {
        # compute sval2a according to Lamport's sval2a
        assume forall I. (
            (  (maxv(m,I) = stop & exists J. ~inst_le(J,I) & le(maxr(m,I),maxr(m,J)) ) & maxr(sval2a,I) = none) |
            ( ~(maxv(m,I) = stop & exists J. ~inst_le(J,I) & le(maxr(m,I),maxr(m,J)) ) & maxr(sval2a,I) = maxr(m,I))
        );
        # compute proposal according to Lamport's E1-E6
        proposal_lamport(I, r, V) := proposal(I, r, V) | (
            maxr(m,I) ~= none & V = maxv(m,I) &
            ~(exists J. ~inst_le(I,J) & maxr(sval2a,J) ~= none & maxv(m,J) = stop)
        )
    };


    # compute proposal according to the variant rule
    local m2:votemap, max_stop_round:round, max_stop_inst:inst {
        # find the stop which appears in the maximal round
        assume (
            ( max_stop_round = none &
              forall I . ~(maxr(m,I) ~= none & maxv(m,I) = stop) ) |
            ( max_stop_round = maxr(m,max_stop_inst) &
              maxr(m,max_stop_inst) ~= none & maxv(m,max_stop_inst) = stop &
              forall I . (maxr(m,I) ~= none & maxv(m,I) = stop) -> le(maxr(m,I),max_stop_round) )
        );
        assume maxv(m2,I) = maxv(m,I);
        # compute m2 s.t. if the stop at max_stop_inst is not void, it voids all previous stops and all future values
        if (max_stop_round = none | (exists I . ~inst_le(I,max_stop_inst) & maxr(m,I) ~= none & ~le(maxr(m,I), max_stop_round))) {
            assume forall I. (
                ( maxv(m,I) ~= stop & maxr(m2,I) = maxr(m,I) ) |
                ( maxv(m,I)  = stop & maxr(m2,I) = none )
            )
        } else {
            assume forall I. (
                ( ~((I ~= max_stop_inst & maxv(m,I) = stop) | ~inst_le(I,max_stop_inst)) & maxr(m2,I) = maxr(m,I) ) |
                (  ((I ~= max_stop_inst & maxv(m,I) = stop) | ~inst_le(I,max_stop_inst)) & maxr(m2,I) = none )
            )
        };
        # propose choosable values according to variant rule
        proposal_variant(I, r, V) := proposal(I, r, V) | (maxr(m2,I) ~= none & V = maxv(m2,I));
    };


    # compute proposal_overapprox according to the overapproximating rule
    local im:inst {
        # check if there are stops
        if (forall I . ~(maxr(m,I) ~= none & maxv(m,I) = stop)) {
            # if there are no stops, propose according to m
            proposal_overapprox(I, r, V) := proposal(I, r, V) | (maxr(m,I) ~= none & V = maxv(m,I))
        } else {
            # if there are stops, find the stop with the maximal round
            assume (
                maxr(m,im) ~= none & maxv(m,im) = stop &
                forall I . (maxr(m,I) ~= none & maxv(m,I) = stop) -> le(maxr(m,I),maxr(m,im))
            );
            # check if the stop at im is voided
            if (exists I . ~inst_le(I,im) & maxr(m,I) ~= none & ~le(maxr(m,I), maxr(m,im))) {
                # the stop at im is voided. void all stops, and also all
                # proposals at instances greater than im and lower
                # rounds. this is needed to be an overapproximation of
                # Lamport's version.
                proposal_overapprox(I, r, V) := proposal(I, r, V) | (maxr(m,I) ~= none & V = maxv(m,I) &
                    ~(maxv(m,I) = stop | (~inst_le(I,im) & ~le(maxr(m,im),maxr(m,I))))
                )
            } else {
                # the stop at im is not voided. void all other stops and
                # all proposals at instances larger than im
                proposal_overapprox(I, r, V) := proposal(I, r, V) | (maxr(m,I) ~= none & V = maxv(m,I) &
                    ~((I ~= im & maxv(m,I) = stop) | ~inst_le(I,im))
                )
            }
        };
    };

    # compare proposal_lamport to proposal_variant and proposal_overapprox
    assert proposal_overapprox(I,r,V) -> proposal_lamport(I,r,V); # this verifies in 3 seconds, in spite of not being EPR
    # assert proposal_variant(I,r,V) -> proposal_lamport(I,r,V); # this fails, and provides an example in which the variant differs from Lamport's
}

export receive_join_acks
