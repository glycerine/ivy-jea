#lang ivy1.6

################################################################################
#
# Modules that should probably come from a standard library
#
################################################################################

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node
type value
# two types of quorums
type quorum_1
type quorum_2
type round

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)


relation member_1(N:node, Q:quorum_1)
relation member_2(N:node, Q:quorum_2)
# quorums of different type intersect
axiom forall Q1:quorum_1, Q2:quorum_2 . exists N:node. member_1(N, Q1) & member_2(N, Q2)

relation one_b_max_vote(N:node, R1:round, R2:round, V:value)
relation proposal(R:round, V:value) # 2a
relation vote(N:node, R:round, V:value) # 2b

individual r:round
individual q:quorum_1
individual maxr:round
individual v:value

relation error
init ~error

action verify_propose_rewrite = {
    # assume auxiliary invariant
    # proposals are unique per round
    assume proposal(R,V1) & proposal(R,V2) -> V1 = V2;
    # only vote for proposed values
    assume vote(N,R,V) -> proposal(R,V);
    # properties of one_b_max_vote
    assume one_b_max_vote(N,R2,none,V1) & ~le(R2,R1) -> ~vote(N,R1,V2);
    assume one_b_max_vote(N,R,RMAX,V) & RMAX ~= none -> ~le(R,RMAX) & vote(N,RMAX,V);
    assume one_b_max_vote(N,R,RMAX,V) & RMAX ~= none & ~le(R,ROTHER) & ~le(ROTHER,RMAX) -> ~vote(N,ROTHER,VOTHER);
    # properties of none
    assume ~vote(N,none,V);

    # assume action conditions (forall exists, but stratified)
    assume r ~= none;
    assume ~proposal(r,V);
    assume forall N:node. member_1(N, q) -> exists R:round, V:value. one_b_max_vote(N,r,R,V);

    # check equivalence
    if ~(
         ((maxr = none & forall N:node,MAXR:round,V:value. ~(member_1(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none)) |
          (maxr ~= none &
           (exists N:node. member_1(N, q) & one_b_max_vote(N,r,maxr,v) & maxr ~= none) &
           (forall N:node,MAXR:round,V:value. (member_1(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none) -> le(MAXR,maxr))
          )
         )
         <->
         ((maxr = none & forall N:node,MAXR:round,V:value. ~(member_1(N, q) & ~le(r,MAXR) & vote(N,MAXR,V))) |
          (maxr ~= none &
          (exists N:node. member_1(N, q) & ~le(r,maxr) & vote(N,maxr,v)) &
           (forall N:node,MAXR:round,V:value. (member_1(N, q) & ~le(r,MAXR) & vote(N,MAXR,V)) -> le(MAXR,maxr))
          )
         )
        ) {
        error := true
    }
}

export verify_propose_rewrite

conjecture ~error
