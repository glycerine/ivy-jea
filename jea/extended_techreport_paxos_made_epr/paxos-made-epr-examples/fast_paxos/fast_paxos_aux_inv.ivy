#lang ivy1.6

################################################################################
#
# Modules that should probably come from a standard library
#
################################################################################

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node
type value
# classic quorums:
type c_quorum
# fast quorums:
type f_quorum
type round

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)
# some rounds are fast rounds:
relation fast(R:round)

relation c_member(N:node, Q:c_quorum)
relation f_member(N:node, Q:f_quorum)
# classic quorums intersect
axiom exists N:node. c_member(N, Q1) & c_member(N, Q2)
# a classic quorum and a two fast quorums intersect
axiom exists N:node . c_member(N,Q1) & f_member(N,Q2) & f_member(N, Q3)

relation one_a(R:round)
relation one_b_max_vote(N:node, R1:round, R2:round, V:value)
relation proposal(R:round, V:value) # 2a
relation vote(N:node, R:round, V:value) # 2b
relation decision(N:node, R:round, V:value) # got 2b from a quorum
relation any_msg(R:round) # an "any" message in a fast round.

init ~one_a(R)
init ~one_b_max_vote(N,R1,R2,V)
init ~proposal(R,V)
init ~vote(N,R,V)
init ~decision(N,R,V)
init ~any_msg(R)

action send_1a = {
    # a proposer selects a round and sends a message asking nodes to join the round
    local r:round {
        assume r ~= none;
        one_a(r) := true
    }
}

action join_round = {
    # receive 1a and answer with 1b
    local n:node, r:round {
        assume r ~= none;
        assume one_a(r);
        assume ~(exists R:round,RMAX:round,V:value. one_b_max_vote(n,R,RMAX,V) & ~le(R,r));

        local maxr:round, v:value {
            # find the maximal vote in a round less than r
            assume ((maxr = none & forall MAXR:round,V:value. ~(~le(r,MAXR) & vote(n,MAXR,V))) |
                    (maxr ~= none & ~le(r,maxr) & vote(n,maxr,v) &
                    (forall MAXR:round,V:value. (~le(r,MAXR) & vote(n,MAXR,V)) -> le(MAXR,maxr))
                   ));
            # send the 1b message
            one_b_max_vote(n,r,maxr,v) := true
        }
    }
}

action propose = {
    # receive a quorum of 1b's and send a 2a (proposal)
    local r:round, q:c_quorum {
        assume r ~= none;
        assume ~proposal(r,V) & ~any_msg(r);
        assume forall N:node. c_member(N, q) -> exists R:round, V:value. one_b_max_vote(N,r,R,V);

        local maxr:round, v:value {
            # find the maximal max_vote in the quorum
            assume ((maxr = none & forall N:node,MAXR:round,V:value. ~(c_member(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none)) |
                    (maxr ~= none &
                    (exists N:node. c_member(N, q) & one_b_max_vote(N,r,maxr,v) & maxr ~= none) &
                    (forall N:node,MAXR:round,V:value. (c_member(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none) -> le(MAXR,maxr))
                    ));
            if maxr ~= none {
                local v2:value {
                    # find if there's a value voted for by an intersection of q with a fast quorum
                    assume ((exists F:f_quorum. forall N:node. ~(f_member(N,F) & c_member(N,q) & ~one_b_max_vote(N,r,maxr,v2))) |
                            (v2 = v &
                             forall V2:value, F:f_quorum. exists N:node. f_member(N,F) & c_member(N,q) & ~one_b_max_vote(N,r,maxr,V2)
                            ));
                    proposal(r, v2) := true
                }
            } else {
                if fast(r) {
                    # fast round, send any_msg
                    any_msg(r) := true
                } else {
                    # classic round, propose arbitrary value
                    proposal(r, v) := true
                }
            }
        }
    }
}


action cast_vote = {
    # receive a 2a or "any" message and send 2b
    local n:node, v:value, r:round {
        assume r ~= none;
        assume ~(exists R:round,RMAX:round,V:value. one_b_max_vote(n,R,RMAX,V) & ~le(R,r));
        assume ~vote(n, r, V);
        # vote for a proposal, or vote for anything if there is an "any" message.
        assume proposal(r, v) | any_msg(r);
        vote(n, r, v) := true
    }
}

action c_decide = {
    # get 2b from a c_quorum
    local n:node, r:round, v:value, q:c_quorum {
        assume r ~= none;
        assume ~fast(r);
        assume c_member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }
}

action f_decide = {
    # get 2b from a f_quorum
    local n:node, r:round, v:value, q:f_quorum {
        assume r ~= none;
        assume fast(r);
        assume f_member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }
}

export send_1a
export join_round
export propose
export cast_vote
export c_decide
export f_decide

# proposals are unique per round
conjecture proposal(R,V1) & proposal(R,V2) -> V1 = V2

# any messages are sent only in fast rounds
conjecture any_msg(R) -> fast(R)

# only vote for proposed values in classic rounds:
conjecture ~fast(R) & vote(N,R,V) -> proposal(R,V)

# votes in fast rounds:
conjecture fast(R) & vote(N,R,V) -> (proposal(R,V) | any_msg(R))
conjecture ~(any_msg(R) & proposal(R,V))
conjecture fast(R) & vote(N,R,V1) & vote(N,R,V2) -> V1 = V2

# properties of one_b_max_vote
conjecture one_b_max_vote(N,R2,none,V1) & ~le(R2,R1) -> ~vote(N,R1,V2)
conjecture one_b_max_vote(N,R,RMAX,V) & RMAX ~= none -> ~le(R,RMAX) & vote(N,RMAX,V)
conjecture one_b_max_vote(N,R,RMAX,V) & RMAX ~= none & ~le(R,ROTHER) & ~le(ROTHER,RMAX) -> ~vote(N,ROTHER,VOTHER)

# properties of none
conjecture ~vote(N,none,V)
