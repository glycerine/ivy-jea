#lang ivy1.6

################################################################################
#
# Verification of the Fast Paxos rewrite step consisting in using the vote relation
# instead of the join_ack_msg relation when determining which value to propose.
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


type node
type value
# classic quorums:
type c_quorum
# fast quorums:
type f_quorum
type round

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)
# some rounds are fast rounds:
relation fast(R:round)

relation c_member(N:node, Q:c_quorum)
relation f_member(N:node, Q:f_quorum)

relation one_a(R:round)
relation one_b_max_vote(N:node, R1:round, R2:round, V:value)
relation proposal(R:round, V:value) # 2a
relation vote(N:node, R:round, V:value) # 2b
relation any_msg(R:round)

individual r:round
individual q:c_quorum
individual maxr:round
individual v:value

relation error
init ~error

action verify_propose_rewrite_1 = {
    # assume the auxiliary invariant:
    # proposals are unique per round
    assume proposal(R,V1) & proposal(R,V2) -> V1 = V2;
    # any messages are sent only in fast rounds
    assume any_msg(R) -> fast(R);
    # only vote for proposed values in classic rounds:
    assume ~fast(R) & vote(N,R,V) -> proposal(R,V);
    # votes in fast rounds:
    assume fast(R) & vote(N,R,V) -> (proposal(R,V) | any_msg(R));
    assume ~(any_msg(R) & proposal(R,V));
    assume fast(R) & vote(N,R,V1) & vote(N,R,V2) -> V1 = V2;
    # properties of one_b_max_vote
    assume one_b_max_vote(N,R2,none,V1) & ~le(R2,R1) -> ~vote(N,R1,V2);
    assume one_b_max_vote(N,R,RMAX,V) & RMAX ~= none -> ~le(R,RMAX) & vote(N,RMAX,V);
    assume one_b_max_vote(N,R,RMAX,V) & RMAX ~= none & ~le(R,ROTHER) & ~le(ROTHER,RMAX) -> ~vote(N,ROTHER,VOTHER);
    # properties of none
    assume ~vote(N,none,V);

    # assume action condition:
    assume r ~= none;
    assume ~proposal(r,V) & ~any_msg(r);
    assume forall N:node. c_member(N, q) -> exists RMAX:round, V:value. one_b_max_vote(N,r,RMAX,V);

    # check equivalence
    if ~(
                   ((maxr = none & forall N:node,MAXR:round,V:value. ~(c_member(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none)) |
                    (maxr ~= none &
                    (exists N:node. c_member(N, q) & one_b_max_vote(N,r,maxr,v) & maxr ~= none) &
                    (forall N:node,MAXR:round,V:value. (c_member(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none) -> le(MAXR,maxr))
                    ))
         <->
                   ((maxr = none & forall N:node,MAXR:round,V:value. ~(c_member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V))) |
                    (maxr ~= none &
                    (exists N:node. c_member(N, q) & ~le(r,maxr) & vote(N,maxr,v)) &
                    (forall N:node,MAXR:round,V:value. (c_member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V)) -> le(MAXR,maxr))
                    ))

        ) {
        error := true
    }
}


action verify_propose_rewrite_2 = {
    # assume the auxiliary invariant:
    # proposals are unique per round
    assume proposal(R,V1) & proposal(R,V2) -> V1 = V2;
    # any messages are sent only in fast rounds
    assume any_msg(R) -> fast(R);
    # only vote for proposed values in classic rounds:
    assume ~fast(R) & vote(N,R,V) -> proposal(R,V);
    # votes in fast rounds:
    assume fast(R) & vote(N,R,V) -> (proposal(R,V) | any_msg(R));
    assume ~(any_msg(R) & proposal(R,V));
    assume fast(R) & vote(N,R,V1) & vote(N,R,V2) -> V1 = V2;
    # properties of one_b_max_vote
    assume one_b_max_vote(N,R2,none,V1) & ~le(R2,R1) -> ~vote(N,R1,V2);
    assume one_b_max_vote(N,R,RMAX,V) & RMAX ~= none -> ~le(R,RMAX) & vote(N,RMAX,V);
    assume one_b_max_vote(N,R,RMAX,V) & RMAX ~= none & ~le(R,ROTHER) & ~le(ROTHER,RMAX) -> ~vote(N,ROTHER,VOTHER);
    # properties of none
    assume ~vote(N,none,V);

    # assume action condition:
    assume r ~= none;
    assume ~proposal(r,V) & ~any_msg(r);
    assume forall N:node. c_member(N, q) -> exists RMAX:round, V:value. one_b_max_vote(N,r,RMAX,V);
    assume ((maxr = none & forall N:node,MAXR:round,V:value. ~(c_member(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none)) |
            (maxr ~= none &
            (exists N:node. c_member(N, q) & one_b_max_vote(N,r,maxr,v) & maxr ~= none) &
            (forall N:node,MAXR:round,V:value. (c_member(N, q) & one_b_max_vote(N,r,MAXR,V) & MAXR ~= none) -> le(MAXR,maxr))
            ));
    assume maxr ~= none;

    # check equivalence
    if ~forall N:node, V:value. (
        (c_member(N,q) & ~one_b_max_vote(N,r,maxr,V))
         <->
        (c_member(N,q) & ~vote(N,maxr,V))
        ) {
        error := true
    }
}

export verify_propose_rewrite_1
export verify_propose_rewrite_2

conjecture ~error
